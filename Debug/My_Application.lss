
My_Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000003ee  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006c  0080006c  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123b  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb3  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af5  00000000  00000000  00002492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094e  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  00003d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000470c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_1>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_2>
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_6>
  1c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_9>
  28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_10>
  2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  8a:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Transmit>:
	// Wait for data to be received
	while (!(UCSRA & (1 << RXC)));
	
	// Get and return received data from buffer
	return UDR;
}
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UART_Transmit>
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
	// Initialize UART
//  	UART_Init(MY_UBRR);
	MCAL_USART_Init(&uo);
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 6d 01 	call	0x2da	; 0x2da <MCAL_USART_Init>
	char received_data;
	UART_Transmit('A');
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	0e 94 49 00 	call	0x92	; 0x92 <UART_Transmit>
	while (1)
	{
		// Transmit a character
		
		received_data = MCAL_USART_ReciveData_Polling();
  a8:	0e 94 cf 01 	call	0x39e	; 0x39e <MCAL_USART_ReciveData_Polling>
		MCAL_USART_TransmitData_Polling(received_data);
  ac:	0e 94 cb 01 	call	0x396	; 0x396 <MCAL_USART_TransmitData_Polling>
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <main+0xe>

000000b2 <__vector_16>:
		ADCSRA |= ADC_Interrupt_Flag;
	return value;
}

ISR(ADC_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	if (P_ADC_InterruptHandler != NULL)
  d4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <P_ADC_InterruptHandler>
  d8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <P_ADC_InterruptHandler+0x1>
  dc:	30 97       	sbiw	r30, 0x00	; 0
  de:	09 f0       	breq	.+2      	; 0xe2 <__vector_16+0x30>
	{
		P_ADC_InterruptHandler();  // Call the user-defined interrupt handler
  e0:	09 95       	icall
	}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	7f 91       	pop	r23
  f0:	6f 91       	pop	r22
  f2:	5f 91       	pop	r21
  f4:	4f 91       	pop	r20
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_1>:
	select_edge(pin_obj);
	enable_interrupt(pin_obj);
	Gp_int_handler[pin_obj->src]=pin_obj->interrupt_Handler;
}

ISR(INT0_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	if (Gp_int_handler[EXT_INT0])
 126:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 12a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
 12e:	30 97       	sbiw	r30, 0x00	; 0
 130:	09 f0       	breq	.+2      	; 0x134 <__vector_1+0x30>
	{
		Gp_int_handler[EXT_INT0]();
 132:	09 95       	icall
	}
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_2>:

ISR(INT1_vect) {
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	if (Gp_int_handler[EXT_INT1])
 178:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end+0x2>
 17c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x3>
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	09 f0       	breq	.+2      	; 0x186 <__vector_2+0x30>
	{
		Gp_int_handler[EXT_INT1]();
 184:	09 95       	icall
	}
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_3>:

ISR(INT2_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	if (Gp_int_handler[EXT_INT2])
 1ca:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x4>
 1ce:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x5>
 1d2:	30 97       	sbiw	r30, 0x00	; 0
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <__vector_3+0x30>
	{
		Gp_int_handler[EXT_INT2]();
 1d6:	09 95       	icall
	}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_11>:

#define OCF0 1
#define TOV0 0

ISR(TIMER0_OVF_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	if (TIMER0_OVF_InerruptHanler != NULL) TIMER0_OVF_InerruptHanler();
 21c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TIMER0_OVF_InerruptHanler>
 220:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TIMER0_OVF_InerruptHanler+0x1>
 224:	30 97       	sbiw	r30, 0x00	; 0
 226:	09 f0       	breq	.+2      	; 0x22a <__vector_11+0x30>
 228:	09 95       	icall
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if (TIMER0_CTC_InerruptHanler != NULL) TIMER0_CTC_InerruptHanler();
 26e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMER0_CTC_InerruptHanler>
 272:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMER0_CTC_InerruptHanler+0x1>
 276:	30 97       	sbiw	r30, 0x00	; 0
 278:	09 f0       	breq	.+2      	; 0x27c <__vector_10+0x30>
 27a:	09 95       	icall
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_9>:
    return result;
}

// ISR Handlers
ISR(TIMER1_OVF_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
    if (TIMER1_OVF_InerruptHanler != NULL) 
        TIMER1_OVF_InerruptHanler();
}
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
    if (TIMER1_CTC_InerruptHanler != NULL) 
        TIMER1_CTC_InerruptHanler();
}
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
    if (TIMER1_ICU_InerruptHanler != NULL) 
        TIMER1_ICU_InerruptHanler();
}
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <MCAL_USART_Init>:

		// Put data into the buffer, which sends the data
		UDR = *Data++;
	}

}
 2da:	fc 01       	movw	r30, r24
 2dc:	8f b7       	in	r24, 0x3f	; 63
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	8f bf       	out	0x3f, r24	; 63
 2e2:	30 81       	ld	r19, Z
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	23 81       	ldd	r18, Z+3	; 0x03
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
 2ea:	83 2b       	or	r24, r19
 2ec:	82 2b       	or	r24, r18
 2ee:	89 2b       	or	r24, r25
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	80 bd       	out	0x20, r24	; 32
 2f4:	80 81       	ld	r24, Z
 2f6:	80 34       	cpi	r24, 0x40	; 64
 2f8:	21 f4       	brne	.+8      	; 0x302 <MCAL_USART_Init+0x28>
 2fa:	90 b5       	in	r25, 0x20	; 32
 2fc:	82 85       	ldd	r24, Z+10	; 0x0a
 2fe:	89 2b       	or	r24, r25
 300:	80 bd       	out	0x20, r24	; 32
 302:	81 85       	ldd	r24, Z+9	; 0x09
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	e1 f4       	brne	.+56     	; 0x340 <MCAL_USART_Init+0x66>
 308:	25 81       	ldd	r18, Z+5	; 0x05
 30a:	36 81       	ldd	r19, Z+6	; 0x06
 30c:	c9 01       	movw	r24, r18
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	aa 1f       	adc	r26, r26
 318:	bb 1f       	adc	r27, r27
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	9c 01       	movw	r18, r24
 324:	ad 01       	movw	r20, r26
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	44 1f       	adc	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	72 e1       	ldi	r23, 0x12	; 18
 332:	8a e7       	ldi	r24, 0x7A	; 122
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodsi4>
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	31 09       	sbc	r19, r1
 33e:	1f c0       	rjmp	.+62     	; 0x37e <MCAL_USART_Init+0xa4>
 340:	25 81       	ldd	r18, Z+5	; 0x05
 342:	36 81       	ldd	r19, Z+6	; 0x06
 344:	c9 01       	movw	r24, r18
 346:	a0 e0       	ldi	r26, 0x00	; 0
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	9c 01       	movw	r18, r24
 35c:	ad 01       	movw	r20, r26
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	44 1f       	adc	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	44 1f       	adc	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	72 e1       	ldi	r23, 0x12	; 18
 372:	8a e7       	ldi	r24, 0x7A	; 122
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodsi4>
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	31 09       	sbc	r19, r1
 37e:	29 b9       	out	0x09, r18	; 9
 380:	30 bd       	out	0x20, r19	; 32
 382:	8a b1       	in	r24, 0x0a	; 10
 384:	88 60       	ori	r24, 0x08	; 8
 386:	8a b9       	out	0x0a, r24	; 10
 388:	8a b1       	in	r24, 0x0a	; 10
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	8a b9       	out	0x0a, r24	; 10
 38e:	8f b7       	in	r24, 0x3f	; 63
 390:	80 68       	ori	r24, 0x80	; 128
 392:	8f bf       	out	0x3f, r24	; 63
 394:	08 95       	ret

00000396 <MCAL_USART_TransmitData_Polling>:
 396:	5d 9b       	sbis	0x0b, 5	; 11
 398:	fe cf       	rjmp	.-4      	; 0x396 <MCAL_USART_TransmitData_Polling>
 39a:	8c b9       	out	0x0c, r24	; 12
 39c:	08 95       	ret

0000039e <MCAL_USART_ReciveData_Polling>:

uint8_t MCAL_USART_ReciveData_Polling()
{
	// Wait until the data is received
	while (!(UCSRA & UCSRA_RXC));
 39e:	5f 9b       	sbis	0x0b, 7	; 11
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <MCAL_USART_ReciveData_Polling>

	// Get and return the received data from the buffer
	return UDR;
 3a2:	8c b1       	in	r24, 0x0c	; 12
}
 3a4:	08 95       	ret

000003a6 <__udivmodsi4>:
 3a6:	a1 e2       	ldi	r26, 0x21	; 33
 3a8:	1a 2e       	mov	r1, r26
 3aa:	aa 1b       	sub	r26, r26
 3ac:	bb 1b       	sub	r27, r27
 3ae:	fd 01       	movw	r30, r26
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <__udivmodsi4_ep>

000003b2 <__udivmodsi4_loop>:
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	ee 1f       	adc	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	a2 17       	cp	r26, r18
 3bc:	b3 07       	cpc	r27, r19
 3be:	e4 07       	cpc	r30, r20
 3c0:	f5 07       	cpc	r31, r21
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <__udivmodsi4_ep>
 3c4:	a2 1b       	sub	r26, r18
 3c6:	b3 0b       	sbc	r27, r19
 3c8:	e4 0b       	sbc	r30, r20
 3ca:	f5 0b       	sbc	r31, r21

000003cc <__udivmodsi4_ep>:
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	1a 94       	dec	r1
 3d6:	69 f7       	brne	.-38     	; 0x3b2 <__udivmodsi4_loop>
 3d8:	60 95       	com	r22
 3da:	70 95       	com	r23
 3dc:	80 95       	com	r24
 3de:	90 95       	com	r25
 3e0:	9b 01       	movw	r18, r22
 3e2:	ac 01       	movw	r20, r24
 3e4:	bd 01       	movw	r22, r26
 3e6:	cf 01       	movw	r24, r30
 3e8:	08 95       	ret

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
